
function evalMath(str) {
	_func = str;
	try {
		return (function(str) {
			return eval(str);
		}).call(Math, str);
	} catch(e) {
        console.log(_e = e);
        Notifier.error(e);
	}
	return null;
}

function plot3D(func, start, end, iterations) {
    // Construct X axis
    var x = []
    for(var i = 0; i <= iterations; i++) {
        var xi = start[0] + (end[0] - start[0]) * i / iterations;
        var dx = []
        for(var j = 0; j <= iterations; j++) {
            dx.push(xi)
        }
        x.push(dx) 
    }
    
    // Construct Y axis
    var y = []
    var dy = [];
    for(var i = 0; i <= iterations; i++) {
        var yi = start[1] + (end[1] - start[1]) * i / iterations;
        dy.push(yi)
    }
    for(var i = 0; i <= iterations; i++) {
        y.push(dy)
    }

    // Finally construct Z axis
    var z = []
    if(typeof func == 'function') {
        for(var i = 0; i <= iterations; i++) {
            var dz = []
            var xi = start[0] + (end[0] - start[0]) * i / iterations;
            for(var j = 0; j <= iterations; j++) {
                var yi = start[1] + (end[1] - start[1]) * j / iterations;
                dz.push(func([xi, yi]))
            } 
            z.push(dz)
        } 
    } else if(typeof func == 'array') {
        z = func;
    } else {
        Notifier.error("Unknown function ", func)
    }
    return {
        x: x, 
        y: y, 
        z: z,
        type: 'surface'
    }
}


function deparam(query, elements) {
	// remove leading question mark if its there
	if (query !== '') {
		var pairs = query.split('&');
		for (var i = 0; i < pairs.length; i += 1) {
			var cur = pairs[i];
			var eq_index = cur.indexOf('=');
			key = (eq_index == -1) ? cur : decodeURIComponent(cur.substring(0, eq_index));
			value = (eq_index == -1) ? null : decodeURIComponent(cur.substring(eq_index+1));
            if(elements[key]) elements[key].value = value;
            else elements[key] = value
		}
	}
}


function copy(to, obj, it) {
	for (var i in it) {
		var attr = it[i]
		if (obj.hasOwnProperty(attr)) to[attr] = obj[attr];
	}
}


// Get variables after #
function getUrlVars(out) {
    var ind = window.location.href.indexOf('#');
    if(ind != -1) {
        deparam(window.location.href.substring(ind+1), out);
    }
    // return new URLSearchParams(window.location.search)
}

function plotOnUpdate(chartName, urlVars) {
    // var urlVars = getUrlVars();

    function getUrlVar(name, def) {
        if(urlVars[name] === undefined && 
                (urlVars.get === undefined || urlVars.get(name) === null))
            return def
        if(urlVars[name] != null) {
            return urlVars[name].value || urlVars[name];
        }
        return urlVars.get(name)
    }

    function num(arr) {
        for(var i = 0; i < arr.length; i++)
            arr[i] = Number.parseFloat(arr[i])
        return arr
    }


	// Move all math functions to global
    copy(window, Math, ["abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "exp", "floor", "log", "max", "min", "pow", "random", "round", "sin", "sqrt", "tan", "PI", "E"]);
    
    // Evaluate init code
    evalMath(getUrlVar('init', ''))

    var chart = []
    if(getUrlVar('func')) {
        func = evalMath(getUrlVar('func'))
        var start = num(getUrlVar('start', '').split(','))
        var end = num(getUrlVar('end', '').split(','))
        var iterations = getUrlVar('iterations', -1)
        chart = plot3D(func, start, end, iterations);
    } else if(getUrlVar('csv')) {
        // MUST BE x,y,z format
        // WARNING: The following code is insanely and undoubtely ugly and it's as
        // just by pure 
        // luck (I am using this with csv's generated by NodeJS, so the pure luck =
        // 'it should work' since it uses the same hardware and software for
        // calculations). If the csv was generated by using using less/more 
        // precise data types than JS's numbers (64bit double typically), then it
        // may not work for you and I am sorry for that. Guess you spent some time
        // debugging this code to get where you are now, reading this comment. If
        // you had no luck, then you should probably try to recode your function in
        // JS and use &func=function(){} argument instead. Sorry!
        var csv = getUrlVar('csv', '').split('\n')
        var n = getUrlVar('n', 0)
        var preprocessedCsv = [] // Sooo long! That what she said.
        for(var i = 0; i < csv.length; i++) {
            if(csv[i] == '') continue;
            var csv_line = csv[i].split(',')
            preprocessedCsv.push(csv_line)
        }

        var table = {}
        var start = [preprocessedCsv[0][0], preprocessedCsv[0][1]] // the minimal coordinate
        var end = [preprocessedCsv[0][0], preprocessedCsv[0][1]] // the max coordinate
        for(var i = 0; i < csv.length; i++) {
            var line = preprocessedCsv[i]
            var x = Number.parseFloat(line[0]) // don't even ask why it's so ugly and why is this comment not aligned
            var y = Number.parseFloat(line[1])
            var z = Number.parseFloat(line[2])

            // Update start with minimal value and end with maximum value
            start[0] = Math.min(start[0], x)
            start[1] = Math.min(start[1], y)
            end[0] = Math.max(end[0], x)
            end[1] = Math.max(end[1], y)

            // Add x,y,z to the table
            var x_table = table[x]
            if(x_table == null) {
                x_table = table[x] = {}
            }
            x_table[y] = z
        }
        chart = plot3D(table, start, end, n-1);
    } else {
        Notifier.error("No &func=X nor &csv=X specified, repair this!")
    }


    if(chart != null) {
        var layout = {
            height: getUrlVar('height', '600').replace('px', ''),
            width: getUrlVar('width', '800').replace('px', ''),
            // That's what he said?
            title: (getUrlVar('title', ''/*'Big healthy hills' */)),
            autosize: true,
            scene: {
                xaxis: {title: getUrlVar('xaxis', 'X')},
                yaxis: {title: getUrlVar('yaxis', 'Y')},
                zaxis: {title: getUrlVar('zaxis', 'Z')}
            }
        }

        Plotly.newPlot(chartName, [ chart ], layout);
    }
}